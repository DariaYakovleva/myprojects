package homework7;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Polinom implements Expression{
	public List<Pair> polinom;
	public Const p;
	
	public Polinom() {
		polinom = new ArrayList<Pair>();
		p = null;
	}
	
	public Polinom(List<Pair> a, Const p) {
		this.p = p;
		polinom = new ArrayList<Pair>();
		for (int i = 0; i < a.size(); i++) {
			polinom.add(new Pair(a.get(i)));
		}
	}
	
	public Polinom(Polinom a) {
		this.p = a.p;
		List<Pair> lst = a.polinom;
		for (Pair x: lst) {
			polinom.add(new Pair(x.cnst(), x.exp()));
		}
	}
	
	int size() {
		return polinom.size();
	}
	
	void push(Expression power, Const mult) {
		polinom.add(new Pair(mult, power));
	}
	
	public int compare(Expression b) {
		if (!(b instanceof Polinom)) {
			return 1;
		}
		Polinom c = (Polinom)b;
		if (isAtom() && c.isAtom()) {
			return p.compare(c.p);
		}
		if (isAtom()) return -1;
		if (c.isAtom()) return 1;
		int exp = getExp().compare(c.getExp());
		int cnst = getCnst().compare(c.getCnst());
		if (exp != 0) 
			return exp;
		if (cnst != 0) {
			return cnst;
		}
		Polinom p1 = rest();
		Polinom p2 = c.rest();
		return p1.compare(p2);
	}
	
	public Expression getExp() {
		return polinom.get(0).exp();
	}
	public Const getCnst() {
		return polinom.get(0).cnst();
	}
	
	public Polinom rest() {
		return new Polinom(polinom.subList(1, polinom.size()), p);
	}

	public boolean isAtom() {
		if (polinom.isEmpty() && p != null) {
			return true;
		}
		return false;
	}
	
	@Override
	public Polinom evaluate() {
		return new Polinom(this);
	}

	@Override
	public String printExp() {
		String res = "";
		for (int i = polinom.size() - 1; i >= 0; i--) {
			res += "(" + polinom.get(i).cnst().printExp() + ") * w ^ (" + polinom.get(i).exp().printExp() + ") ";
			if (i > 0) res += "+ ";
		}
		return res;
	}
	
	public void sort() {
		for (int i = 0; i < polinom.size(); i++) {
			for (int j = polinom.size() - 1; j > i; j--) {
				if (polinom.get(j).exp().compare(polinom.get(j - 1).exp()) < 0) {
					Collections.swap(polinom, j, j - 1);
				}
			}
		}
	}
}
