package homework7;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Polinom implements Expression{
	public List<Expression> powers;
	public List<Const> mults;
	
	public Polinom() {
		powers = new ArrayList<Expression>();
		mults = new ArrayList<Const>();
	}
	
	public Polinom(List<Expression> a, List<Const> b) {
		powers = new ArrayList<Expression>(a);
		mults = new ArrayList<Const>(b);
	}
	
	List<Expression> getPowers() {
		return powers;
	}
	
	List<Const> getMults() {
		return mults;
	}
	
	int size() {
		return powers.size();
	}
	
	void push(Expression power, Const mult) {
		powers.add(power);
		mults.add(mult);
	}
	
	public int compare(Expression b) {
		if (!(b instanceof Polinom)) {
			return 1;
		}
		Polinom c = (Polinom)b;
		List<Expression> bp = c.getPowers();
		List<Const> bm = c.getMults();
		for (int i = 0; i < Integer.min(powers.size(), bp.size()); i++) {
			int p = powers.get(i).compare(bp.get(i));
			if (p == 0) {
				int m = mults.get(i).compare(bm.get(i));
				if (m != 0) {
					return m;
				}
			} else {
				return p;
			}
		}
		if (powers.size() > bp.size()) {
			return 1;
		}
		if (powers.size() < bp.size()) {
			return -1;
		}
		return 0;
	}

	@Override
	public Polinom evaluate() {
		return new Polinom(powers, mults);
	}

	@Override
	public String printExp() {
		String res = "";
		for (int i = powers.size() - 1; i >= 0; i--) {
			res += "(" + mults.get(i).printExp() + ") * w ^ (" + powers.get(i).printExp() + ") ";
			if (i > 0) res += "+ ";
		}
		return res;
	}
	
	public void sort() {
		for (int i = 0; i < powers.size(); i++) {
			for (int j = powers.size() - 1; j > i; j--) {
				if (powers.get(j).compare(powers.get(j - 1)) < 0) {
					Collections.swap(powers, j, j - 1);
					Collections.swap(mults, j, j - 1);
				}
			}
		}
	}
}
