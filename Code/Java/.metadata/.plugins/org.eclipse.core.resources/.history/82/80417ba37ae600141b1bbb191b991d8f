import info.kgeorgiy.java.advanced.crawler.CachingDownloader;
import info.kgeorgiy.java.advanced.crawler.Crawler;
import info.kgeorgiy.java.advanced.crawler.Document;
import info.kgeorgiy.java.advanced.crawler.Downloader;
import info.kgeorgiy.java.advanced.crawler.URLUtils;

import java.io.IOException;
import java.net.MalformedURLException;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;


public class WebCrawler implements Crawler {

	ExecutorService executor;
	Downloader downloader;
	CachingDownloader cachDownloader;


	public WebCrawler(Downloader downloader, int downloaders, int extractors, int perHost) {
		System.err.println(downloaders + " " + extractors);
		executor = Executors.newFixedThreadPool(downloaders);
		this.downloader = downloader;
	}

	@Override
	public List<String> download(String url, int depth) throws IOException {
		RecursiveWalk siteTree = new RecursiveWalk();
		siteTree.resursiveGo(url, depth);
		return siteTree.getResult();
	}

	@Override
	public void close() {
		executor.shutdown();
	}

	class RecursiveWalk {

		List<String> result = new CopyOnWriteArrayList<>();

		public void resursiveGo(String url, int depth) {
//			System.err.println("D="+depth);
			if (depth == 0) {
				return;
			}
//			synchronized(result) {
				if (result.contains(url)) {
					return;
				}
				result.add(url);
//			}
			String host = null;
			try {
				host = URLUtils.getHost(url);
			} catch (MalformedURLException e1) {
				e1.printStackTrace();
			}
			Future<List<String>> term = executor.submit(new Callable<List<String>>() {
				@Override
				public List<String> call() throws Exception {
					Document doc;
					try {
						doc = downloader.download(url);
						List<String> links = doc.extractLinks();
						for (int i = 0; i < links.size(); i++) {
							resursiveGo(links.get(i), depth - 1);
						}
					} catch (IOException e) {
						e.printStackTrace();
					}
					return null;
				}
			});
			while (!term.isDone()) {};
		}

		public List<String> getResult() {
			return result;
		}
	}
}


