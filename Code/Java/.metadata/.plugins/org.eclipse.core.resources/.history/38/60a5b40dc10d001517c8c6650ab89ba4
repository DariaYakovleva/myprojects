import java.util.ArrayList;
import java.util.List;


public class LambdaParser {

	private final char IMP = '-';
	private final char OPEN = '(';
	private final char OR = '|';
	private final char AND = '&';
	private final char NOT = '!';

	private String lexem;
	private int nextperm;
	Expression res;
	private List<String> variables = new ArrayList<String>();
	
	private Expression negation() {
		Expression a;
		if (lexem.charAt(nextperm) >= 'A' && lexem.charAt(nextperm) <= 'Z') {
			String val = "";
			while ((lexem.charAt(nextperm) >= 'A' && lexem.charAt(nextperm) <= 'Z') || 
					(lexem.charAt(nextperm) >= '1' && lexem.charAt(nextperm) <= '9')) {
				val += lexem.charAt(nextperm);
				nextperm++;
			}
			a = new Variable(val);
			if (!variables.contains(val)) variables.add(val);
		}  else if (lexem.charAt(nextperm) == OPEN) {
			nextperm++;
			a = expr();
			nextperm++;
		} else if (lexem.charAt(nextperm) == NOT) {
			nextperm++;
			a = new Not(negation());
		} else {
			a = null;
		}
		return a;
	}
	private Expression conjunction() {
		Expression a = negation();
		while (lexem.charAt(nextperm) == AND) {
			nextperm++;
			a = new And(a, negation());
		}
		return a;
	}
	
	private Expression disjunction() {
		Expression a = conjunction();
		while (lexem.charAt(nextperm) == OR) {
			nextperm++;
			a = new Or(a, conjunction());
		}
		return a;
	}

	private Expression expr() {
		Expression a = disjunction();
		if (lexem.charAt(nextperm) == IMP) {
			nextperm += 2;
			a = new Implication(a, expr());
		}
		return a;
	}

	ExpressionParser(String a) {
		nextperm = 0;
		lexem = a.replaceAll("\\s", "").concat(".");
		res = expr();
	}
	
	public List<String> getVariables() {
		return variables;
	}

	public static Expression parse(String a) {
		return (new ExpressionParser(a)).res;
	}

}
